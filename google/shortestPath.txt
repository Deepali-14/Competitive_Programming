Ques-8:
Given a 2-D binary matrix of size n*m, where 0 represents an empty space while 1 represents a wall you cannot walk through. 
You are also given an integer k.
You can walk up, down, left, or right. Given that you can remove up to k walls, return the minimum number of steps to walk 
from the top left corner (0, 0) to the bottom right corner (n-1, m-1).
Note: If there is no way to walk from the top left corner to the bottom right corner, return -1.
    

Ans-8:
    public:
    int shotestPath(vector<vector<int>> mat, int n, int m, int k) {
        queue<vector<int>> q;
        vector<vector<int>>obstacles(n, vector<int>(m, INT_MAX));
        const vector<vector<int>> dirs={{1,0}, {0,1}, {-1,0}, {0,-1}};
        obstacles[0][0]=mat[0][0];
        q.push({0,0});
        int steps=0;
        while(!q.empty())
        {
            for(int l=q.size(); l>0; --l)
            {
                vector<int> pair=q.front();
                int i=pair[0], j=pair[1];
                q.pop();
                if(i==n-1 and j==m-1)
                    return steps;
                for(const auto& dir:dirs)
                {
                    const int x=i+dir[0];
                    const int y=j+dir[1];
                    if(x<0 or y<0 or x>=n or y>=m)
                        continue;
                    if(mat[x][y]+obstacles[i][j]>k)
                        continue;
                    if(obstacles[x][y] <= mat[x][y] + obstacles[i][j])
                        continue;
                    obstacles[x][y]=mat[x][y]+obstacles[i][j];
                    q.push({x,y});
                }
            }
            steps+=1;
        }
        return -1;
    }