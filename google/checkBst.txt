Ques-10:
Given the root of a binary tree. Check whether it is a BST or not.
Note: We are considering that BSTs can not contain duplicate Nodes.
A BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Ans-10:
    public:
    //Function to check whether a Binary Tree is BST or not.
    bool isBST(Node* root) 
    {
        int min=INT_MIN;
        int max=INT_MAX;
        return Isbst(root,min,max); 
    }
    
    bool Isbst(Node* root,int min,int max){
        if(root==NULL){return true;}
        if(root->data >=max || root->data <=min){return false;}
        return Isbst(root->left,min,root->data) && Isbst(root->right,root->data,max);
    }